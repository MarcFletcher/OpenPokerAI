// Encog(tm) Artificial Intelligence Framework v2.5
// .Net Version
// http://www.heatonresearch.com/encog/
// http://code.google.com/p/encog-java/
// 
// Copyright 2008-2010 by Heaton Research Inc.
// 
// Released under the LGPL.
//
// This is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this software; if not, write to the Free
// Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
// 02110-1301 USA, or see the FSF site: http://www.fsf.org.
// 
// Encog and Heaton Research are Trademarks of Heaton Research, Inc.
// For information on Heaton Research trademarks, visit:
// 
// http://www.heatonresearch.com/copyright.html

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Encog.Persist.Attributes;
using Encog.Normalize.Input;

namespace Encog.Normalize.Output
{
    /// <summary>
    ///  Defines an output field that can be grouped.  Groupable classes
    /// will extend this class.
    /// </summary>
    public abstract class OutputFieldGrouped : BasicOutputField
    {
        /// <summary>
        /// The group that this field is a member of.
        /// </summary>
        [EGReference]
        private IOutputFieldGroup group;

        /// <summary>
        /// The source field, this is the input field that provides data
        /// for this output field.
        /// </summary>
        [EGReference]
        private IInputField sourceField;

        /// <summary>
        /// Default constructor, used mainly for reflection.
        /// </summary>
        public OutputFieldGrouped()
        {
        }

        /// <summary>
        /// Construct a grouped output field.
        /// </summary>
        /// <param name="group">The group that this field belongs to.</param>
        /// <param name="sourceField">The source field for this output field.</param>
        public OutputFieldGrouped(IOutputFieldGroup group,
                 IInputField sourceField)
        {
            this.group = group;
            this.sourceField = sourceField;
            this.group.GroupedFields.Add(this);
        }

        /// <summary>
        /// The group that this field belongs to.
        /// </summary>
        /// <returns></returns>
        public IOutputFieldGroup Group
        {
            get
            {
                return this.group;
            }
        }

        /// <summary>
        /// The source field for this output field.
        /// </summary>
        /// <returns></returns>
        public IInputField SourceField
        {
            get
            {

                return this.sourceField;
            }
        }

        /// <summary>
        /// Init this field for a new row.
        /// </summary>
        public abstract override void RowInit();

        /// <summary>
        /// The numebr of fields that will actually be generated by 
        /// this field. For a simple field, this value is 1.
        /// </summary>
        public abstract override int SubfieldCount { get; }

        /// <summary>
        /// Calculate the value for this field.  Specify subfield of zero
        /// if this is a simple field.
        /// </summary>
        /// <param name="subfield"> The subfield index.</param>
        /// <returns>The calculated value for this field.</returns>
        public abstract override double Calculate(int subfield);
    }
}
